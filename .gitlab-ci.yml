stages:
    - build
    - test
    - deploy
# -----------------------------------------------------------------------------------
.auto_devops: &auto_devops |
    # Auto DevOps variables and functions
    [[ "$TRACE" ]] && set -x

    function docker_login() {
        docker login -u ${CI_REGISTRY_USER} -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    }

    function docker_logout() {
        docker logout ${CI_REGISTRY}
    }

before_script:
  - *auto_devops
# -----------------------------------------------------------------------------------
# Build docker images
.docker: &docker
  image: docker:stable
  services:
    - name: docker:stable-dind
      alias: docker

build:express:app:
    <<: *docker
    stage: build
    script:
      - cd express-app
      - docker_login
      - docker pull ${CI_REGISTRY_IMAGE}/express:latest || true
      - DOCKER_BUILDKIT=1 docker build --cache-from ${CI_REGISTRY_IMAGE}/express:latest -t ${CI_REGISTRY_IMAGE}/express:latest -t ${CI_REGISTRY_IMAGE}/express:${CI_COMMIT_REF_NAME} .
      - docker push ${CI_REGISTRY_IMAGE}/express:${CI_COMMIT_REF_NAME}
      - docker push ${CI_REGISTRY_IMAGE}/express:latest
      - docker_logout

build:flask:app:
    <<: *docker
    stage: build
    script:
      - cd flask-app
      - docker_login
      - docker pull ${CI_REGISTRY_IMAGE}/flask:latest || true
      - DOCKER_BUILDKIT=1 docker build --cache-from ${CI_REGISTRY_IMAGE}/flask:latest -t ${CI_REGISTRY_IMAGE}/flask:latest -t ${CI_REGISTRY_IMAGE}/flask:${CI_COMMIT_REF_NAME} .
      - docker push ${CI_REGISTRY_IMAGE}/flask:${CI_COMMIT_REF_NAME}
      - docker push ${CI_REGISTRY_IMAGE}/flask:latest
      - docker_logout

build:web:app:
    <<: *docker
    stage: build
    script:
      - cd web-client
      - docker_login
      - docker pull ${CI_REGISTRY_IMAGE}/web:latest || true
      - DOCKER_BUILDKIT=1 docker build --cache-from ${CI_REGISTRY_IMAGE}/web:latest -t ${CI_REGISTRY_IMAGE}/web:latest -t ${CI_REGISTRY_IMAGE}/web:${CI_COMMIT_REF_NAME} .
      - docker push ${CI_REGISTRY_IMAGE}/web:${CI_COMMIT_REF_NAME}
      - docker push ${CI_REGISTRY_IMAGE}/web:latest
      - docker_logout
# -----------------------------------------------------------------------------------
# Test docker images

test:express:app:
    needs:
      - build:express:app
    variables:
      GIT_STRATEGY: none
    image: curlimages/curl
    services:
      - name: ${CI_REGISTRY_IMAGE}/express:${CI_COMMIT_REF_NAME}
        alias: express
    stage: test
    script:
      - curl -sI "http://express:3000/hello"

test:flask:app:
    needs:
      - build:flask:app
    variables:
      GIT_STRATEGY: none
    image: curlimages/curl
    services:
      - name: ${CI_REGISTRY_IMAGE}/flask:${CI_COMMIT_REF_NAME}
        alias: flask
    stage: test
    script:
      - curl -sI "http://flask:8000/hello"

test:web:app:
    needs:
      - build:web:app
    variables:
      GIT_STRATEGY: none
    image: curlimages/curl
    services:
      - name: ${CI_REGISTRY_IMAGE}/web:${CI_COMMIT_REF_NAME}
        alias: web
    stage: test
    script:
      - curl -sI "http://web:8080/"

.scan: &scan
    variables:
      GIT_STRATEGY: none
    image: alpine:latest
    stage: test
    script:
      - apk add --no-cache curl docker-cli
      - docker_login
      - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
      - trivy image --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed --no-progress ${IMAGE_PATH}
      - docker_logout
    artifacts:
      reports:
        container_scanning: gl-container-scanning-report.json

scan:express:app:
    needs:
      - build:express:app
    <<: *scan
    variables:
      IMAGE_PATH: ${CI_REGISTRY_IMAGE}/express:${CI_COMMIT_REF_NAME}

scan:flask:app:
    needs:
      - build:flask:app
    <<: *scan
    variables:
      IMAGE_PATH: ${CI_REGISTRY_IMAGE}/flask:${CI_COMMIT_REF_NAME}

scan:web:app:
    needs:
      - build:web:app
    <<: *scan
    variables:
      IMAGE_PATH: ${CI_REGISTRY_IMAGE}/web:${CI_COMMIT_REF_NAME}
# -----------------------------------------------------------------------------------
# Deploy to kubernetes

.deploy: &deploy
  stage: deploy
  cache: {}
  when: manual
  image:
    name: alpine/helm
    entrypoint: [""]
  script:
    - helm package ${MANIFESTS_PATH} --app-version ${CI_COMMIT_REF_NAME} --version ${CI_COMMIT_REF_NAME}
    - helm upgrade
      --install ${APP_NAME} ${APP_NAME}-${CI_COMMIT_REF_NAME}.tgz
      --namespace ${NAMESPACE}
      --set gitlab.env=$CI_ENVIRONMENT_SLUG
      --set gitlab.app=$CI_PROJECT_PATH_SLUG
  artifacts:
    name: "${APP_NAME}-{CI_COMMIT_REF_NAME}"
    paths:
      - ${APP_NAME}-${CI_COMMIT_REF_NAME}.tgz
    when: on_success
    
deploy:express:app:
  <<: *deploy
  needs:
    - test:express:app
  variables:
    NAMESPACE: backend
    APP_NAME: express
    MANIFESTS_PATH: express-app/manifests/
  environment:
    name: development
    url: https://silly.ajiteb.nl/express/hello

deploy:flask:app:
  <<: *deploy
  needs:
    - test:flask:app
  variables:
    NAMESPACE: backend
    APP_NAME: flask
    MANIFESTS_PATH: flask-app/manifests/
  environment:
    name: development
    url: https://silly.ajiteb.nl/flask/hello

deploy:web:app:
  <<: *deploy
  needs:
    - test:web:app
  variables:
    NAMESPACE: frontend
    APP_NAME: web
    MANIFESTS_PATH: web-client/manifests/
  environment:
    name: development
    url: https://silly.ajiteb.nl/